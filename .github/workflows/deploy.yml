name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Pre-deployment tests
  pre-deploy-tests:
    name: 🧪 Pre-deployment Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Run critical tests
        run: |
          echo "🧪 Running pre-deployment tests..."
          
          # Test Jekyll build
          echo "Testing Jekyll build..."
          bundle exec jekyll build --dry-run
          
          # Test YAML files
          echo "Testing YAML files..."
          ruby -c _config.yml
          ruby -c _i18n/es.yml
          ruby -c _i18n/en.yml
          
          # Test JavaScript syntax
          echo "Testing JavaScript..."
          if command -v node >/dev/null 2>&1; then
            node -c assets/js/main.js
          fi
          
          echo "✅ Pre-deployment tests passed!"

  # Build job
  build:
    name: 🔨 Build Site
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Post-build validation
  post-build-validation:
    name: ✅ Post-build Validation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: github-pages
          path: _site/

      - name: Extract and validate build
        run: |
          echo "📦 Extracting build artifact..."
          cd _site
          tar -xf artifact.tar
          
          echo "🔍 Validating build output..."
          
          # Check if main files exist
          required_files=(
            "index.html"
            "en/index.html"
            "assets/css/style.css"
            "assets/js/main.js"
            "cv/index.html"
            "proyectos/index.html"
            "blog/index.html"
            "en/resume/index.html"
            "en/projects/index.html"
            "en/blog/index.html"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ Missing in build: $file"
            fi
          done
          
          # Check if assets are properly generated
          if [ -f "assets/css/style.css" ]; then
            css_size=$(wc -c < "assets/css/style.css")
            if [ $css_size -gt 1000 ]; then
              echo "✅ CSS file generated (${css_size} bytes)"
            else
              echo "⚠️ CSS file seems too small (${css_size} bytes)"
            fi
          fi
          
          echo "✅ Build validation completed!"

  # Deployment job
  deploy:
    name: 🚀 Deploy
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, post-build-validation]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Post-deployment validation
  post-deploy-validation:
    name: 🌐 Post-deployment Validation
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: Wait for deployment
        run: |
          echo "⏱️ Waiting for deployment to be available..."
          sleep 30

      - name: Test deployed site
        run: |
          echo "🌐 Testing deployed site..."
          ruby scripts/test.rb
          
      - name: Deployment success notification
        run: |
          echo "## 🎉 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Site URL**: https://l3onkers.github.io" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validated:" >> $GITHUB_STEP_SUMMARY
          echo "- Jekyll build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- All required files present in build" >> $GITHUB_STEP_SUMMARY
          echo "- Site deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- Post-deployment URL tests passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
