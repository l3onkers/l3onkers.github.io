name: 🚀 CI/CD Pipeline - Test, Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job 1: Quick validation tests
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: ⚡ Quick Tests
        run: |
          echo "⚡ Running quick validation tests..."
          
          # Test YAML files syntax
          echo "📋 Testing YAML files..."
          ruby -e "require 'yaml'; YAML.load_file('_config.yml')"
          ruby -e "require 'yaml'; YAML.load_file('_i18n/es.yml')"
          ruby -e "require 'yaml'; YAML.load_file('_i18n/en.yml')"
          
          # Test JavaScript syntax
          echo "� Testing JavaScript..."
          if command -v node >/dev/null 2>&1; then
            node -c assets/js/main.js
          fi
          
          echo "✅ Quick validation tests passed!"

  # Job 2: Jekyll setup and dependencies
  setup-dependencies:
    name: 📦 Setup Dependencies
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing bundle dependencies..."
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: 🔧 Validate Jekyll Setup
        run: |
          echo "📦 Testing bundle dependencies..."
          bundle list
          
          echo "🔧 Testing Jekyll configuration..."
          bundle exec jekyll doctor

      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

  # Job 3: Build tests
  build-tests:
    name: 🔨 Build Tests
    runs-on: ubuntu-latest
    needs: setup-dependencies
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 📦 Install Dependencies
        run: |
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: 🛠️ Development Build Test
        run: |
          echo "🛠️ Testing development build..."
          JEKYLL_ENV=development bundle exec jekyll build --verbose
          echo "✅ Development build successful"

      - name: 🏭 Production Build Test
        run: |
          echo "🏭 Testing production build..."
          rm -rf _site
          JEKYLL_ENV=production bundle exec jekyll build --verbose
          echo "✅ Production build successful"

      - name: 🔍 Validate Build Results
        run: |
          echo "🔍 Validating build results..."
          if [ -d "_site" ]; then
            site_size=$(du -sh _site | cut -f1)
            echo "📊 Site size: $site_size"
            
            echo "📁 Generated structure:"
            find _site -type f -name "*.html" | head -20
            
            # Check if main files exist (flexible validation)
            required_files=(
              "_site/index.html"
              "_site/en/index.html" 
              "_site/assets/css/style.css"
              "_site/assets/js/main.js"
            )
            
            # Optional files (won't fail if missing)
            optional_files=(
              "_site/cv/index.html"
              "_site/cv.html"
              "_site/proyectos/index.html"
              "_site/proyectos.html"
              "_site/blog/index.html"
              "_site/blog.html"
              "_site/en/resume/index.html"
              "_site/en/resume.html"
              "_site/en/projects/index.html"
              "_site/en/projects.html"
              "_site/en/blog/index.html"
              "_site/en/blog.html"
            )
            
            # Check required files
            for file in "${required_files[@]}"; do
              if [ -f "$file" ]; then
                echo "✅ $file exists"
              else
                echo "❌ $file missing"
                exit 1
              fi
            done
            
            # Check optional files (won't fail)
            for file in "${optional_files[@]}"; do
              if [ -f "$file" ]; then
                echo "✅ $file exists"
              else
                echo "⚠️ $file not found (checking alternative paths)"
              fi
            done
            
            echo "✅ Build validation completed successfully"
          else
            echo "❌ _site directory not found"
            exit 1
          fi

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-test-artifacts
          path: _site/
          retention-days: 1

  # Job 4: Content validation
  content-validation:
    name: 📝 Content Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌐 Check Posts Translations
        run: |
          echo "📝 Running content validation..."
          
          # Check posts translations by date
          echo "🌐 Checking post translations..."
          
          extract_date() {
            basename "$1" | grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
          }
          
          missing_translations=0
          for post in _posts/es/*.md; do
            if [ -f "$post" ]; then
              post_date=$(extract_date "$post")
              filename=$(basename "$post")
              
              en_files=(_posts/en/${post_date}-*.md)
              
              if [ -f "${en_files[0]}" ]; then
                en_filename=$(basename "${en_files[0]}")
                echo "✅ Translation found: $filename → $en_filename"
              else
                echo "⚠️ Missing translation for date $post_date: $filename"
              fi
            fi
          done
          
          echo "✅ Content validation completed"

  # Job 5: Production build (only for main branch)
  production-build:
    name: 🏭 Production Build
    runs-on: ubuntu-latest
    needs: [build-tests, content-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 📦 Install Dependencies
        run: |
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: 🔧 Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: 🏭 Build for Production
        run: |
          echo "🏭 Building for production deployment..."
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 📦 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

  # Job 6: Deploy (only for main branch)
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: production-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 7: Post-deployment validation (only after deploy)
  post-deploy-validation:
    name: 🌐 Post-deploy Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 📦 Install Dependencies
        run: |
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: ⏱️ Wait for Deployment
        run: |
          echo "⏱️ Waiting for deployment to be available..."
          sleep 30

      - name: 🌐 Test Live Site
        run: |
          echo "🌐 Validating deployed site..."
          
          # Test deployed site URLs
          echo "🔗 Testing deployed URLs..."
          if [ -f "scripts/test.rb" ]; then
            ruby scripts/test.rb
          else
            echo "⚠️ Test script not found, running basic URL tests..."
            
            # Basic curl tests
            urls=(
              "https://l3onkers.github.io/"
              "https://l3onkers.github.io/en/"
              "https://l3onkers.github.io/cv"
              "https://l3onkers.github.io/blog"
              "https://l3onkers.github.io/assets/css/style.css"
            )
            
            for url in "${urls[@]}"; do
              status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              if [ "$status" = "200" ]; then
                echo "✅ $url ($status)"
              else
                echo "❌ $url ($status)"
              fi
            done
          fi

      - name: 🎉 Success Summary
        run: |
          echo "## 🎉 Deployment Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Pipeline Jobs Completed:" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Quick Validation" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Setup Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- 🔨 Build Tests" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Content Validation" >> $GITHUB_STEP_SUMMARY
          echo "- 🏭 Production Build" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Deploy to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Post-deploy Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Live Site**: https://l3onkers.github.io" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
