name: 🚀 CI/CD Pipeline - Test, Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Complete pipeline: Test → Build → Deploy
  ci-cd-pipeline:
    name: 🔄 Complete Pipeline
    runs-on: ubuntu-latest
    steps:
      # 1. SETUP
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: true

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 2. QUICK VALIDATION TESTS
      - name: ⚡ Quick Validation Tests
        run: |
          echo "⚡ Running quick validation tests..."
          
          # Test bundle dependencies
          echo "📦 Testing bundle dependencies..."
          bundle list
          
          # Test Jekyll configuration
          echo "🔧 Testing Jekyll configuration..."
          bundle exec jekyll doctor
          
          # Test YAML files syntax
          echo "📋 Testing YAML files..."
          ruby -e "require 'yaml'; YAML.load_file('_config.yml')"
          ruby -e "require 'yaml'; YAML.load_file('_i18n/es.yml')"
          ruby -e "require 'yaml'; YAML.load_file('_i18n/en.yml')"
          
          # Test JavaScript syntax
          echo "🟨 Testing JavaScript..."
          if command -v node >/dev/null 2>&1; then
            node -c assets/js/main.js
          fi
          
          echo "✅ Quick validation tests passed!"

      # 3. JEKYLL BUILD TESTS
      - name: 🔨 Jekyll Build Tests
        run: |
          echo "🔨 Testing Jekyll builds..."
          
          # Development build test
          echo "🛠️ Testing development build..."
          JEKYLL_ENV=development bundle exec jekyll build --verbose
          echo "✅ Development build successful"
          
          # Clean for production build
          rm -rf _site
          
          # Production build test  
          echo "🏭 Testing production build..."
          JEKYLL_ENV=production bundle exec jekyll build --verbose
          echo "✅ Production build successful"
          
          # Validate build results
          echo "🔍 Validating build results..."
          if [ -d "_site" ]; then
            site_size=$(du -sh _site | cut -f1)
            echo "📊 Site size: $site_size"
            
            # Check if main files exist
            required_files=(
              "_site/index.html"
              "_site/en/index.html" 
              "_site/assets/css/style.css"
              "_site/assets/js/main.js"
              "_site/cv/index.html"
              "_site/proyectos/index.html"
              "_site/blog/index.html"
              "_site/en/resume/index.html"
              "_site/en/projects/index.html"
              "_site/en/blog/index.html"
            )
            
            for file in "${required_files[@]}"; do
              if [ -f "$file" ]; then
                echo "✅ $file exists"
              else
                echo "❌ $file missing"
                exit 1
              fi
            done
          else
            echo "❌ _site directory not found"
            exit 1
          fi

      # 4. CONTENT VALIDATION
      - name: 📝 Content Validation
        run: |
          echo "📝 Running content validation..."
          
          # Check posts translations by date
          echo "🌐 Checking post translations..."
          
          extract_date() {
            basename "$1" | grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
          }
          
          missing_translations=0
          for post in _posts/es/*.md; do
            if [ -f "$post" ]; then
              post_date=$(extract_date "$post")
              filename=$(basename "$post")
              
              en_files=(_posts/en/${post_date}-*.md)
              
              if [ -f "${en_files[0]}" ]; then
                en_filename=$(basename "${en_files[0]}")
                echo "✅ Translation found: $filename → $en_filename"
              else
                echo "⚠️ Missing translation for date $post_date: $filename"
              fi
            fi
          done
          
          echo "✅ Content validation completed"

      # 5. SETUP PAGES (only for pushes to main, not PRs)
      - name: 🔧 Setup GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: pages
        uses: actions/configure-pages@v5

      # 6. PRODUCTION BUILD (only for pushes to main)
      - name: 🏭 Production Build
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🏭 Building for production deployment..."
          rm -rf _site
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      # 7. UPLOAD ARTIFACT (only for pushes to main)
      - name: 📦 Upload Build Artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3

      # 8. DEPLOY TO GITHUB PAGES (only for pushes to main)
      - name: 🚀 Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: deployment
        uses: actions/deploy-pages@v4

      # 9. POST-DEPLOYMENT VALIDATION (only after deployment)
      - name: 🌐 Post-deployment Validation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "🌐 Validating deployed site..."
          echo "⏱️ Waiting for deployment to be available..."
          sleep 30
          
          # Test deployed site URLs
          echo "🔗 Testing deployed URLs..."
          if [ -f "scripts/test.rb" ]; then
            ruby scripts/test.rb
          else
            echo "⚠️ Test script not found, running basic URL tests..."
            
            # Basic curl tests
            urls=(
              "https://l3onkers.github.io/"
              "https://l3onkers.github.io/en/"
              "https://l3onkers.github.io/cv"
              "https://l3onkers.github.io/blog"
              "https://l3onkers.github.io/assets/css/style.css"
            )
            
            for url in "${urls[@]}"; do
              status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              if [ "$status" = "200" ]; then
                echo "✅ $url ($status)"
              else
                echo "❌ $url ($status)"
              fi
            done
          fi

      # 10. SUCCESS SUMMARY
      - name: 🎉 Pipeline Success Summary
        if: success()
        run: |
          echo "## 🎉 Pipeline Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Quick validation tests" >> $GITHUB_STEP_SUMMARY
          echo "- Jekyll build tests (dev & prod)" >> $GITHUB_STEP_SUMMARY
          echo "- Content validation" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- Production build" >> $GITHUB_STEP_SUMMARY
            echo "- Deployment to GitHub Pages" >> $GITHUB_STEP_SUMMARY
            echo "- Post-deployment validation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🌐 **Live Site**: https://l3onkers.github.io" >> $GITHUB_STEP_SUMMARY
          else
            echo "- PR validation (no deployment)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
