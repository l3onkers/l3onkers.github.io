name: 🚀 CI/CD Pipeline - Test, Build & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Job 1: Quick validation tests
  quick-validation:
    name: ⚡ Quick Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: ⚡ Quick Tests
        run: |
          echo "⚡ Running quick validation tests..."
          
          # Test YAML files syntax
          echo "📋 Testing YAML files..."
          ruby -e "require 'yaml'; YAML.load_file('_config.yml')"
          ruby -e "require 'yaml'; YAML.load_file('_i18n/es.yml')"
          ruby -e "require 'yaml'; YAML.load_file('_i18n/en.yml')"
          
          # Test JavaScript syntax
          echo "� Testing JavaScript..."
          if command -v node >/dev/null 2>&1; then
            node -c assets/js/main.js
          fi
          
          echo "✅ Quick validation tests passed!"

  # Job 2: Jekyll setup and dependencies
  setup-dependencies:
    name: 📦 Setup Dependencies
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 📦 Install Dependencies
        run: |
          echo "📦 Installing bundle dependencies..."
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: 🔧 Validate Jekyll Setup
        run: |
          echo "📦 Testing bundle dependencies..."
          bundle list
          
          echo "🔧 Testing Jekyll configuration..."
          bundle exec jekyll doctor

      - name: 💾 Cache Dependencies
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

  # Job 3: Build tests
  build-tests:
    name: 🔨 Build Tests
    runs-on: ubuntu-latest
    needs: setup-dependencies
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 📦 Install Dependencies
        run: |
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: 🛠️ Development Build Test
        run: |
          echo "🛠️ Testing development build..."
          JEKYLL_ENV=development bundle exec jekyll build --verbose
          echo "✅ Development build successful"

      - name: 🏭 Production Build Test
        run: |
          echo "🏭 Testing production build..."
          rm -rf _site
          JEKYLL_ENV=production bundle exec jekyll build --verbose
          echo "✅ Production build successful"

      - name: 🔍 Validate Build Results
        run: |
          echo "🔍 Validating build results..."
          if [ -d "_site" ]; then
            site_size=$(du -sh _site | cut -f1)
            echo "📊 Site size: $site_size"
            
            # Check if main files exist
            required_files=(
              "_site/index.html"
              "_site/en/index.html" 
              "_site/assets/css/style.css"
              "_site/assets/js/main.js"
              "_site/cv.html"
              "_site/proyectos.html"
              "_site/blog.html"
              "_site/en/resume.html"
              "_site/en/projects.html"
              "_site/en/blog.html"
            )
            
            for file in "${required_files[@]}"; do
              if [ -f "$file" ]; then
                echo "✅ $file exists"
              else
                echo "❌ $file missing"
                exit 1
              fi
            done
            
            # Validate that blog posts are generated
            es_posts=$(find _site/blog -name "index.html" 2>/dev/null | wc -l)
            en_posts=$(find _site/en/blog -name "index.html" 2>/dev/null | wc -l)
            echo "📝 Generated posts: $es_posts (ES) + $en_posts (EN) = $((es_posts + en_posts)) total"
            
            if [ $((es_posts + en_posts)) -lt 6 ]; then
              echo "⚠️ Warning: Expected at least 6 posts (3 ES + 3 EN), found $((es_posts + en_posts))"
            fi
            
            echo "✅ Build validation completed successfully"
          else
            echo "❌ _site directory not found"
            exit 1
          fi

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-test-artifacts
          path: _site/
          retention-days: 1

  # Job 4: Content validation
  content-validation:
    name: 📝 Content Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🌐 Check Posts Translations
        run: |
          echo "📝 Running content validation..."
          
          # Check posts translations by date
          echo "🌐 Checking post translations..."
          
          extract_date() {
            basename "$1" | grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
          }
          
          missing_translations=0
          for post in _posts/es/*.md; do
            if [ -f "$post" ]; then
              post_date=$(extract_date "$post")
              filename=$(basename "$post")
              
              en_files=(_posts/en/${post_date}-*.md)
              
              if [ -f "${en_files[0]}" ]; then
                en_filename=$(basename "${en_files[0]}")
                echo "✅ Translation found: $filename → $en_filename"
              else
                echo "⚠️ Missing translation for date $post_date: $filename"
              fi
            fi
          done
          
          echo "✅ Content validation completed"

  # Job 5: Production build (only for main branch)
  production-build:
    name: 🏭 Production Build
    runs-on: ubuntu-latest
    needs: [build-tests, enhanced-content-validation, html-accessibility-validation]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 💾 Restore Dependencies Cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: 📦 Install Dependencies
        run: |
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: 🔧 Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: 🏭 Build for Production
        run: |
          echo "🏭 Building for production deployment..."
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production

      - name: 📦 Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3

  # Job 6: Deploy (only for main branch)
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: production-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 7: Post-deployment validation (only after deploy)
  post-deploy-validation:
    name: 🌐 Post-deploy Validation
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 📦 Install Dependencies
        run: |
          gem install bundler
          bundle config set --local deployment 'false'
          bundle config set --local path 'vendor/bundle'
          bundle config set --local without 'test development'
          bundle install --jobs 4 --retry 3

      - name: ⏱️ Wait for Deployment
        run: |
          echo "⏱️ Waiting for deployment to be available..."
          sleep 30

      - name: 🌐 Test Live Site
        run: |
          echo "🌐 Validating deployed site..."
          
          # Test deployed site URLs
          echo "🔗 Testing deployed URLs..."
          if [ -f "scripts/test.rb" ]; then
            ruby scripts/test.rb
          else
            echo "⚠️ Test script not found, running basic URL tests..."
            
            # Basic curl tests
            urls=(
              "https://l3onkers.github.io/"
              "https://l3onkers.github.io/en/"
              "https://l3onkers.github.io/cv.html"
              "https://l3onkers.github.io/blog.html"
              "https://l3onkers.github.io/proyectos.html"
              "https://l3onkers.github.io/en/resume.html"
              "https://l3onkers.github.io/en/projects.html"
              "https://l3onkers.github.io/en/blog.html"
              "https://l3onkers.github.io/assets/css/style.css"
              "https://l3onkers.github.io/assets/js/main.js"
            )
            
            for url in "${urls[@]}"; do
              status=$(curl -s -o /dev/null -w "%{http_code}" "$url")
              if [ "$status" = "200" ]; then
                echo "✅ $url ($status)"
              else
                echo "❌ $url ($status)"
              fi
            done
          fi

      - name: 🎉 Deployment Success
        run: |
          echo "## � Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Live Site**: https://l3onkers.github.io" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Job 8: HTML & Accessibility validation
  html-accessibility-validation:
    name: 🔍 HTML & Accessibility Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-test-artifacts
          path: _site/

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install HTML Testing Tools
        run: |
          npm install -g html-validate
          npm install -g pa11y

      - name: 🔍 Validate HTML
        run: |
          echo "🔍 Validating HTML syntax..."
          find _site -name "*.html" -exec html-validate {} \;

      - name: ♿ Test Accessibility
        run: |
          echo "♿ Testing accessibility..."
          # Serve site locally for testing
          python3 -m http.server 8000 --directory _site &
          SERVER_PID=$!
          sleep 5
          
          # Accessibility tests on main pages
          pa11y http://localhost:8000/ || true
          pa11y http://localhost:8000/blog.html || true
          pa11y http://localhost:8000/cv.html || true
          pa11y http://localhost:8000/en/ || true
          
          # Kill server
          kill $SERVER_PID

  # Job 9: Enhanced content validation
  enhanced-content-validation:
    name: 📝 Enhanced Content Validation
    runs-on: ubuntu-latest
    needs: quick-validation
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 💎 Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: 📦 Install YAML Tools
        run: |
          gem install yaml-lint
          gem install htmlbeautifier

      - name: 📋 Enhanced YAML Validation
        run: |
          echo "📋 Validating YAML files with enhanced checks..."
          yaml-lint _config.yml
          yaml-lint _i18n/es.yml
          yaml-lint _i18n/en.yml
          
          # Validate frontmatter of posts
          for file in _posts/**/*.md; do
            if [ -f "$file" ]; then
              echo "Validating frontmatter: $file"
              head -20 "$file" | yaml-lint || echo "⚠️ Warning in $file"
            fi
          done

      - name: 🌐 Enhanced Translation Check
        run: |
          echo "🌐 Enhanced translation verification..."
          
          extract_date() {
            basename "$1" | grep -o '^[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}'
          }
          
          missing_translations=0
          for post in _posts/es/*.md; do
            if [ -f "$post" ]; then
              post_date=$(extract_date "$post")
              filename=$(basename "$post")
              
              en_files=(_posts/en/${post_date}-*.md)
              
              if [ -f "${en_files[0]}" ]; then
                en_filename=$(basename "${en_files[0]}")
                echo "✅ Translation found: $filename → $en_filename"
              else
                echo "❌ Missing translation for date $post_date: $filename"
                missing_translations=1
              fi
            fi
          done
          
          # Check reverse direction
          for post in _posts/en/*.md; do
            if [ -f "$post" ]; then
              post_date=$(extract_date "$post")
              filename=$(basename "$post")
              
              es_files=(_posts/es/${post_date}-*.md)
              
              if [ ! -f "${es_files[0]}" ]; then
                echo "❌ Missing Spanish translation for date $post_date: $filename"
                missing_translations=1
              fi
            fi
          done
          
          if [ $missing_translations -eq 1 ]; then
            echo ""
            echo "💡 Tip: Each post must have its translation with the same date (YYYY-MM-DD)"
            echo "   Example: 2024-01-15-welcome.md ↔ 2024-01-15-bienvenido.md"
            exit 1
          fi

      - name: 📁 Check Required Files
        run: |
          echo "📁 Checking required files..."
          required_files=(
            "_config.yml"
            "index.html"
            "en/index.html"
            "_layouts/default.html"
            "_layouts/post.html"
            "assets/css/style.css"
            "assets/js/main.js"
            "robots.txt"
          )
          
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✅ $file"
            else
              echo "❌ Missing: $file"
              exit 1
            fi
          done

  # Job 10: Performance testing
  performance-testing:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    needs: build-tests
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-test-artifacts
          path: _site/

      - name: 🌐 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install Performance Tools
        run: |
          npm install -g lighthouse
          npm install --save-dev clean-css terser

      - name: 🔄 Run Asset Minification
        run: |
          echo "🔧 Running asset minification..."
          if [ -f "package.json" ]; then
            npm install
            node scripts/minify.js || echo "Minification script not found, continuing..."
          fi

      - name: 🚀 Run Performance Tests
        run: |
          echo "🚀 Running enhanced performance tests..."
          
          # Serve site locally
          python3 -m http.server 8000 --directory _site &
          SERVER_PID=$!
          sleep 5
          
          # Run Lighthouse for multiple pages
          echo "🔍 Testing homepage..."
          lighthouse http://localhost:8000/ \
            --output json \
            --output html \
            --output-path ./lighthouse-homepage \
            --chrome-flags="--headless --no-sandbox" \
            --preset="desktop" \
            --throttling-method="devtools" \
            --quiet || true
          
          echo "🔍 Testing blog page..."
          lighthouse http://localhost:8000/blog.html \
            --output json \
            --output html \
            --output-path ./lighthouse-blog \
            --chrome-flags="--headless --no-sandbox" \
            --preset="desktop" \
            --throttling-method="devtools" \
            --quiet || true
          
          # Extract and display scores
          echo "📊 Performance Scores:"
          if [ -f "lighthouse-homepage.report.json" ]; then
            node -e "
              const report = JSON.parse(require('fs').readFileSync('lighthouse-homepage.report.json'));
              const scores = report.lhr.categories;
              console.log('Homepage Scores:');
              console.log('  Performance: ' + Math.round(scores.performance.score * 100));
              console.log('  Accessibility: ' + Math.round(scores.accessibility.score * 100));
              console.log('  Best Practices: ' + Math.round(scores['best-practices'].score * 100));
              console.log('  SEO: ' + Math.round(scores.seo.score * 100));
            " || true
          fi
          
          # Kill server
          kill $SERVER_PID

      - name: 📊 Upload Performance Reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            lighthouse-*.html
            lighthouse-*.json
          retention-days: 30

  # Job 11: Test Summary (always runs to show results)
  test-summary:
    name: 📊 Test Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, setup-dependencies, build-tests, content-validation, enhanced-content-validation, html-accessibility-validation, performance-testing]
    if: always()
    steps:
      - name: 📊 Generate Test Results Summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Job | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| ⚡ Quick Validation | ${{ needs.quick-validation.result == 'success' && '✅ Passed' || needs.quick-validation.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | YAML, JS syntax validation |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Setup Dependencies | ${{ needs.setup-dependencies.result == 'success' && '✅ Passed' || needs.setup-dependencies.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Ruby, Bundle installation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build Tests | ${{ needs.build-tests.result == 'success' && '✅ Passed' || needs.build-tests.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Jekyll dev/prod builds |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Content Validation | ${{ needs.content-validation.result == 'success' && '✅ Passed' || needs.content-validation.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Post translations |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Enhanced Content | ${{ needs.enhanced-content-validation.result == 'success' && '✅ Passed' || needs.enhanced-content-validation.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | YAML lint, required files |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 HTML & Accessibility | ${{ needs.html-accessibility-validation.result == 'success' && '✅ Passed' || needs.html-accessibility-validation.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | HTML validation, pa11y |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Performance Tests | ${{ needs.performance-testing.result == 'success' && '✅ Passed' || needs.performance-testing.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Lighthouse performance |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "${{ needs.quick-validation.result }}" == "success" && 
                "${{ needs.setup-dependencies.result }}" == "success" && 
                "${{ needs.build-tests.result }}" == "success" ]]; then
            echo "## 🎉 Core Tests: All Passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Core Tests: Some Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
